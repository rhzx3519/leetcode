#!usr/bin/env python  
#-*- coding:utf-8 _*-  

# Prim算法 & Kruskal算法

Prim算法
1）以某一个点开始，寻找当前该点可以访问的所有的边；
2）在已经寻找的边中发现最小边，这个边必须有一个点还没有访问过，将还没有访问的点加入我们的集合，记录添加的边；
3）寻找当前集合可以访问的所有边，重复2的过程，直到没有新的点可以加入；
4）此时由所有边构成的树即为最小生成树。

例题: 
1584. 连接所有点的最小费用
https://leetcode-cn.com/problems/min-cost-to-connect-all-points/

Kruskal算法原理：
现在我们假设一个图有m个节点，n条边。首先，我们需要把m个节点看成m个独立的生成树，并且把n条边按照从小到大的数据进行排列。
在n条边中，我们依次取出其中的每一条边，如果发现边的两个节点分别位于两棵树上，那么把两棵树合并成为一颗树；
如果树的两个节点位于同一棵树上，那么忽略这条边，继续运行。等到所有的边都遍历结束之后，如果所有的生成树可以合并成一条生成树，
那么它就是我们需要寻找的最小生成树，反之则没有最小生成树。

例题
1489. 找到最小生成树里的关键边和伪关键边
https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/
